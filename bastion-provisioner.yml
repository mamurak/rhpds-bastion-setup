---
- name: Ansible play to provision bastion machine
  hosts: rhods_bastion
  vars_files:
    - user_vars.yml
  tasks:
    - name: Check all variables are populated
      ansible.builtin.fail:
        msg: All variables in rhods_bastion.yml should be populated.
      when: (quay_auth_token == None or quay_auth_token is not defined) or (github_access_token == None or github_access_token is not defined) or (github_account == None or github_account is not defined) or (s3_secret == None or s3_secret is not defined)

    - name: Clone rh-emea-sa repository
      ansible.builtin.git:
        repo: "{{ git_repo }}"
        dest: ~/industrial-edge
        version: "{{ git_branch }}"
        force: true

    - name: Set Cluster URL as fact
      ansible.builtin.set_fact:
        cluster_url: "{{ ocp_api_url | urlsplit('hostname') | ansible.builtin.split('.') }}"

    - name: Set Cluster name and domain as fact
      ansible.builtin.set_fact:
        cluster_name: "{{ cluster_url[1] }}"
        cluster_domain: "{{ cluster_url | reject('search', cluster_url[0]) | reject('search',cluster_url[1]) | list | join('.') }}"

    - name: Populate values-global.yaml file in {{ ansible_user }} home
      ansible.builtin.template:
        src: values-global.yaml.j2
        dest: ~/industrial-edge/values-global.yaml
        mode: 0755

    - name: Prepare for pushing
      ansible.builtin.copy:
        content: "https://{{ github_account }}:{{ github_access_token }}@github.com"
        dest: ~/.git-credentials
        mode: 0700

    - name: Prepare for pushing
      ansible.builtin.shell:
        cmd: git config credential.helper store 'store --file=~/.git-credentials'
        chdir: ~/industrial-edge

    - name: Push modifications to user branch
      ansible.builtin.shell:
        cmd: git add values-global.yaml && git commit -m "Updated cluster name and domain" && git push -u origin {{ git_branch }}
        chdir: ~/industrial-edge

    - name: Populate values-secret.yaml file in {{ ansible_user }} home
      ansible.builtin.template:
        src: values-secret.yaml.j2
        dest: ~/values-secret.yaml
        mode: 0755

    - name: Ensure helm is installed
      ansible.builtin.unarchive:
        src: "https://get.helm.sh/helm-v3.9.2-linux-amd64.tar.gz"
        dest: /tmp
        remote_src: true

    - name: Install kubernetes Python module
      ansible.builtin.pip:
        name: kubernetes
      become: true

    - name: Install helm in PATH
      ansible.builtin.copy:
        src: /tmp/linux-amd64/helm
        dest: /usr/bin/
        remote_src: true
        mode: +x
      become: true

    - name: Cleanup temp folder
      ansible.builtin.file:
        state: absent
        path: /tmp/linux-amd64/

    - name: Ensure right packages are in place
      ansible.builtin.dnf:
        name: "{{ item }}"
        state: latest # noqa package-latest
      become: true
      loop:
        - make

    - name: Run make show command to validate output
      make:
        chdir: ~/industrial-edge
        target: show

    - name: Run install target to setup the environment
      make:
        chdir: ~/industrial-edge
        target: install

    - name: Log in (obtain access token)
      community.okd.openshift_auth:
        username: "{{ ocp_username }}"
        password: "{{ ocp_password }}"
        host: "{{ ocp_api_url }}"
        verify_ssl: false
      register: openshift_auth_results

    - name: Obtain routes for ArgoCD from the cluster
      kubernetes.core.k8s_info:
        api_version: route.openshift.io/v1
        kind: Route
        name: "{{ item.route_name }}"
        namespace: "{{ item.namespace }}"
        api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
        host: "{{ ocp_api_url }}"
        verify_ssl: false
      loop: "{{ ocp_resources }}"
      register: routes

    - name: Obtain admin password for ArgoCD from the cluster
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Secret
        name: "{{ item.secret_name }}"
        namespace: "{{ item.namespace }}"
        api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
        host: "{{ ocp_api_url }}"
        verify_ssl: false
      loop: "{{ ocp_resources }}"
      register: secrets

    - name: Show route and admin password for ArgoCD instances
      ansible.builtin.debug:
        msg: |
          Host address for ArgoCD in {{ item.namespace }} is: {{ routes | community.general.json_query(route_query) | select() | join("") }}
          Password for ArgoCD instance in {{ item.namespace }} namespace is: {{ secrets | community.general.json_query(secret_query) | select() | join("") | b64decode }}
      vars:
        route_query: "results[*].resources[?metadata.name=='{{ item.route_name }}'].spec.host"
        secret_query: "results[*].resources[?metadata.name=='{{ item.secret_name }}'].data.\"admin.password\""
      loop: "{{ ocp_resources }}"
